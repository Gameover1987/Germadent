<UserControl x:Class="Germadent.Rma.App.Views.UserControls.MouthUserControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:viewmodels="clr-namespace:Germadent.Rma.App.ViewModels"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800"
             xmlns:designMock="clr-namespace:Germadent.Rma.App.Views.DesignMock"
             xmlns:toothCard="clr-namespace:Germadent.Rma.App.ViewModels.ToothCard"
             d:DataContext="{d:DesignInstance Type=designMock:DesignMockLaboratoryProjectWizardStepViewModel, IsDesignTimeCreatable=True}">
    <UserControl.Resources>
        <DataTemplate DataType="{x:Type viewmodels:MaterialViewModel}">
            <TextBlock Text="{Binding Item.Name}"/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type toothCard:ProstheticsTypeViewModel}">
            <TextBlock Text="{Binding Item.Name}"/>
        </DataTemplate>
    </UserControl.Resources>

    <Grid DataContext="{Binding ToothCard}">
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <Canvas Grid.Row="0" Background="White">
            <Path x:Name="toothCardPath" Stroke="Black" StrokeThickness="2" />
        </Canvas>
        <ListBox Grid.Row="0" x:Name="_mouthListBox"
                 Style="{x:Null}"
                 Background="Transparent"
                 ItemsSource="{Binding Teeth}"
                 SelectionMode="Extended"
                 SelectionChanged="_mouthListBox_OnSelectionChanged">
            <ListBox.ItemsPanel>
                <ItemsPanelTemplate>
                    <Canvas IsItemsHost="True"/>
                </ItemsPanelTemplate>
            </ListBox.ItemsPanel>
            <ListBox.ItemContainerStyle>
                <Style TargetType="{x:Type ListBoxItem}">
                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                    <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                <Border x:Name="Bd" Background="Transparent" Margin="0,0,0,0" SnapsToDevicePixels="true" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" >
                                    <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </ListBox.ItemContainerStyle>
            <ListBox.ItemTemplate>
                <DataTemplate DataType="{x:Type toothCard:ToothViewModel}">
                    <Grid Background="Transparent"
                          Tag="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBox}, Path=DataContext}">
                        <Grid.Style>
                            <Style TargetType="{x:Type Grid}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsChanged}" Value="True">
                                        <Setter Property="ToolTip">
                                            <Setter.Value>
                                                <StackPanel Orientation="Vertical" Background="Transparent" >
                                                    <TextBlock Text="{Binding Description}" HorizontalAlignment="Stretch"
                                                               Visibility="{Binding HasDescription, Converter={StaticResource BoolToVisibilityConverter}}"/>
                                                    <TextBlock Text="{Binding ErrorDescription}" Foreground="Red" HorizontalAlignment="Stretch"
                                                               Visibility="{Binding IsValid, Converter={StaticResource BoolToInvisibilityConverter}}"/>
                                                </StackPanel>
                                            </Setter.Value>
                                        </Setter>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Grid.Style>
                        <Grid.ContextMenu>
                            <ContextMenu>
                                <MenuItem Header="Условия протезирования"
                                          ItemsSource="{Binding ProstheticConditions}">
                                    <MenuItem.ItemContainerStyle>
                                        <Style TargetType="{x:Type MenuItem}">
                                            <Setter Property="IsCheckable" Value="True"/>
                                            <Setter Property="IsChecked" Value="{Binding IsChecked}"/>
                                            <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}, Path=PlacementTarget.Tag.SelectPtostheticsConditionCommand}"/>
                                            <Setter Property="CommandParameter" Value="{Binding}"/>
                                        </Style>
                                    </MenuItem.ItemContainerStyle>
                                </MenuItem>
                                <MenuItem Header="Тип протезирования"
                                          ItemsSource="{Binding ProstheticTypes}">
                                    <MenuItem.ItemContainerStyle>
                                        <Style TargetType="{x:Type MenuItem}">
                                            <Setter Property="IsCheckable" Value="True"/>
                                            <Setter Property="IsChecked" Value="{Binding IsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                            <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}, Path=PlacementTarget.Tag.SelectPtostheticsTypeCommand}"/>
                                            <Setter Property="CommandParameter" Value="{Binding}"/>
                                        </Style>
                                    </MenuItem.ItemContainerStyle>
                                </MenuItem>
                                <MenuItem Header="Материал"
                                          ItemsSource="{Binding Materials}">
                                    <MenuItem.ItemContainerStyle>
                                        <Style TargetType="{x:Type MenuItem}">
                                            <Setter Property="IsCheckable" Value="True"/>
                                            <Setter Property="IsChecked" Value="{Binding IsChecked}"/>
                                            <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}, Path=PlacementTarget.Tag.SelectMaterialCommand}"/>
                                            <Setter Property="CommandParameter" Value="{Binding}"/>
                                        </Style>
                                    </MenuItem.ItemContainerStyle>
                                </MenuItem>
                                <MenuItem Header="Мост" IsCheckable="True" IsChecked="{Binding HasBridge}"
                                          Command="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}, Path=PlacementTarget.Tag.SelectBridgeCommand}"
                                          CommandParameter="{Binding}"/>
                                <Separator/>
                                <MenuItem Header="Очистить" Command="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}, Path=PlacementTarget.Tag.ClearCommand}"/>
                            </ContextMenu>
                        </Grid.ContextMenu>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <Viewbox Width="30">
                            <Grid>
                                <Ellipse StrokeThickness="1">
                                    <Ellipse.Style>
                                        <Style TargetType="{x:Type Ellipse}">
                                            <Setter Property="Fill" Value="White"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsChanged}" Value="True">
                                                    <Setter Property="Stroke" Value="Black"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding IsValid}" Value="False">
                                                    <Setter Property="StrokeDashArray" Value="1 1"/>
                                                </DataTrigger>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBoxItem}, Path=IsSelected}" Value="True"/>
                                                        <Condition Binding="{Binding IsChanged}" Value="false"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Stroke" Value="Gray"/>
                                                    <Setter Property="Fill" Value="LightGray"/>
                                                </MultiDataTrigger>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBoxItem}, Path=IsSelected}" Value="True"/>
                                                        <Condition Binding="{Binding IsChanged}" Value="True"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Stroke" Value="Black"/>
                                                    <Setter Property="Fill" Value="LightGray"/>
                                                </MultiDataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Ellipse.Style>
                                </Ellipse>

                                <TextBlock Grid.Row="0" Text="{Binding Number}" Margin="3" />
                            </Grid>
                        </Viewbox>
                    </Grid>
                </DataTemplate>
            </ListBox.ItemTemplate>
        </ListBox>

        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <TextBlock Grid.Column="0" Text="Описание работ" VerticalAlignment="Center" Margin="0,5,0,0"/>
            <TextBox Grid.Column="1" Margin="6,6,0,0" Text="{Binding Description, Mode=OneWay}" IsReadOnly="True" IsReadOnlyCaretVisible="True"/>
            <Button Grid.Column="2" Content="Копировать" Margin="6,6,0,0"
                    Command="{Binding CopyDescriptionCommand}"/>
        </Grid>
    </Grid>
</UserControl>
